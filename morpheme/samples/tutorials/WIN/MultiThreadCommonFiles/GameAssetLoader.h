// Copyright (c) 2010 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
  #pragma once
#endif
#ifndef GAME_ASSET_LOADER_H
#define GAME_ASSET_LOADER_H
//----------------------------------------------------------------------------------------------------------------------
#include "morpheme/mrNetworkDef.h"
#include "simpleBundle/simpleAnimRuntimeIDtoFilenameLookup.h"
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// \class GameAssetLoader
/// \brief A simple version of a morpheme asset store.
///
/// The functions in this class are designed to work with the bundles generated by the default morpheme asset compilers.
/// These bundles contain an asset of type kAsset_SimpleAnimRuntimeIDtoFilenameLookup which is used to translate the
/// animation asset IDs provided by the morpheme runtime into filenames.
///
/// This implementation uses NMP::Memory to allocate memory for each asset and sharing of assets between bundle is
/// supported. For additional details see the documentation on each method.
///
/// As long as you keep with the simple bundle format as used by the default asset compilers and do not add any new
/// asset types this implementation is fairly portable and should server well as a basis for your own implementations.
//----------------------------------------------------------------------------------------------------------------------
class GameAssetLoader
{
public:

  /// \brief Parses the bundle and returns the number of core (registrable) and client assets found.
  /// \see GameAssetLoader::loadNetworkDef()
  ///
  /// This information is required to preallocate the buffers given to loadBunlde() at the correct size.
  static void evalBundleRequirements(
    uint32_t& numRegisteredAssets,
    uint32_t& numClientAssets,
    void*     bundle,
    size_t    bundleSize);

  /// \brief Loads a network definition and all associated assets from the given bundle.
  /// \see GameAssetLoader::evalBundleRequirements()
  ///
  /// All assets in the bundle, provided they do not already exist, are loaded into the asset store and a list of asset
  /// IDs for the registered assets and a list of pointers for the client assets is generated which can be used to
  /// unload the assets later. The bundle memory can be freed after this method has completed.
  ///
  /// The network definition GUID (a 16 byte GUID) which is also returned can be used to identify network definitions to
  /// a morpheme:connect instance connected via COMMS. The animation file lookup is used by GameAnimLoader to locate
  /// animation files on disk.
  ///
  /// No animation are loaded yet, this has to be done separately.
  static MR::NetworkDef* loadNetworkDef(
    uint32_t* registeredAssetIDs,
    void**    clientAssets,
    uint8_t*  networkDefGuid,
    MR::UTILS::SimpleAnimRuntimeIDtoFilenameLookup *&animFileLookup,
    uint32_t numRegisteredAssets,
    uint32_t numClientAssets,
    void*    bundle,
    size_t   bundleSize);

  /// \brief Unloads the given network definition.
  /// \see GameAssetLoader::loadNetworkDef()
  ///
  /// This is done by iterating over all registered assets and decreasing their reference count, and if the reference
  /// counts hits zero, the asset is unregistered and its memory freed. Client assets are always freed as they are not
  /// shared between network definitions.
  static void unloadAssets(
    const uint32_t* registeredAssetIDs,
    uint32_t        numRegisteredAssets,
    void* const*    clientAssets,
    uint32_t        numClientAssets);
};

//----------------------------------------------------------------------------------------------------------------------
#endif // GAME_ASSET_LOADER_H
//----------------------------------------------------------------------------------------------------------------------
