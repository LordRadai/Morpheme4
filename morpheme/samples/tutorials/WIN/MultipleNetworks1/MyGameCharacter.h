// Copyright (c) 2011 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
#pragma once
#endif
#ifndef MY_GAME_CHARACTER_H
#define MY_GAME_CHARACTER_H
//----------------------------------------------------------------------------------------------------------------------
#include "GameManagement/NoPhysics/GameCharacterNoPhysics.h"
//----------------------------------------------------------------------------------------------------------------------

namespace Game
{

//----------------------------------------------------------------------------------------------------------------------
// MyCharacter:
//
// This class is designed to highlight the functionality discussed in the 'MultipleNetworks1' tutorial - ie. the creation
// and initialisation of a Game::Character instance. MyCharacter represents an instantiated version of a Game::CharacterDef. 
// Essentially the class wraps up the instantiated morpheme network and the information required to update and run an
// individual character. In a game scenario a Game::Character Class could also store data for a character instance
// (current health/ammo etc).
class MyCharacter : public Character
{
public:

  virtual ~MyCharacter() {};

  //----------------------------
  // Create an instance of a morpheme network (GameCharacter)
  static MyCharacter* create(CharacterDef* characterDef);

  /// \brief Release an instance of a character.
  virtual void destroy() NM_OVERRIDE;

  //----------------------------
  // Character update stages...
  //----------------------------

  // Update step 1: 
  //  Build the queue and process it up to the point where the global character controller update is required.
  //  After this step the game or AI can amend the position of the character if so desired.
  void updateToPreCharacterController(float deltaTime);

  // Update step 2:
  //  The final update stage.
  void updateFinalise(
    const NMP::Vector3* deltaTranslation = NULL, ///< Allows the caller to apply a delta translation other than the one generated by the Network update.
                                                 ///<  If not supplied then the delta value generated by the Network will be used.
    const NMP::Quat*    deltaOrientation = NULL  ///< Allows the caller to apply a delta orientation other than the one generated by the Network update.
                                                 ///<  If not supplied then the delta value generated by the Network will be used.
    );

  // Returns the character controller held in the network.
  CharacterControllerNoPhysics*  getCharacterController() { return static_cast<CharacterControllerNoPhysics*>(m_net->getCharacterController()); } 
};

} // namespace Game

//----------------------------------------------------------------------------------------------------------------------
#endif // MY_GAME_CHARACTER_H
//----------------------------------------------------------------------------------------------------------------------
